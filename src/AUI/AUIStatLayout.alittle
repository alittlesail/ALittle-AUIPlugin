
namespace AUIPlugin;

public class AUIStatLayout : ALittle.DisplayLayout
{
    private ALittle.DynamicImage _image;
    private int _point_size = 5;
    private int _draw_width = 0;
    private int _draw_height = 0;

    private int _min_index = 0;
    private int _max_index = 0;
    private double _max_value = 0;
    private double _sum_value = 0;
    private Map<int, double> _loss_map = new Map<int, double>();
    private Map<int, bool> _right_map = new Map<int, bool>();

    private fun TCtor()
    {
        this._image = new ALittle.DynamicImage(this._ctrl_sys);
        this._image.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._image.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._image.SetRenderMode(1);
        this.AddChild(this._image);
    }

    public fun Init(int point_size, int draw_width, int draw_height)
    {
        this._point_size = point_size;
        if (this._point_size < 1) this._point_size = 1;
        this._draw_width = draw_width;
        if (this._draw_width < 0) this._draw_width = 0;
        this._draw_height = draw_height;
        if (this._draw_height < 0) this._draw_height = 0;

        this._min_index = 0;
        this._max_index = 0;
        this._sum_value = 0;
        this._loss_map = new Map<int, double>();
        this._right_map = new Map<int, bool>();
        this._max_value = this.CalcMaxValue();

        this._image.SetSurfaceSize(this._draw_width, this._draw_height, 0xFF000000);
    }

    private fun CalcMaxValue() : double
    {
        var value = this.GetAverageValue();
        if (value <= 0) return 1;

        var max_value = value;
        if (max_value < 1) max_value = 1;
        return max_value;
    }

    private fun TryFreshMaxValue()
    {
        var value = this.GetAverageValue();
        // 如果平均值是当前的1/4，或者超出max_value
        var need_fresh = value <= this._max_value / 4 || value > this._max_value;
        if (!need_fresh) return;

        var target = value * 2;
        if (target < 1) target = 1;
        if (this._max_value == target) return;

        this._max_value = target;

        // 清空内容
        this._image.SetSurfaceSize(this._draw_width, this._draw_height, 0xFF000000);

        var min_index = this._min_index;
        var max_index = this._max_index;
        var loss_map = this._loss_map;
        var right_map = this._right_map;

        this._loss_map = new Map<int, double>();
        this._right_map = new Map<int, bool>();
        this._min_index = 0;
        this._max_index = 0;
        this._sum_value = 0;

        for (var i = min_index + 1; i <= max_index; 1)
            this.AddValue(loss_map[i], right_map[i], true);
    }

    public fun GetAverageValue() : double
    {
        var count = this._max_index - this._min_index;
        if (count <= 0) return 0;
        return this._sum_value / count;
    }

    public fun AddValue(double loss, bool right, [Nullable] bool not_refresh)
    {
        this._sum_value += loss;
        if (this._max_index - this._min_index + 1 < ALittle.Math_Floor(this._draw_width / this._point_size))
        {
            this._max_index += 1;
        }
        else
        {
            if (this._min_index > 0)
            	this._sum_value -= this._loss_map[this._min_index];
            this._loss_map[this._min_index] = null;
            this._right_map[this._min_index] = null;
            this._min_index += 1;
            this._max_index += 1;
            var surface = this._image.GetSurface(true);
            carp.TransferCarpSurface(surface, "left", this._point_size);
        }

        this._loss_map[this._max_index] = loss;
        this._right_map[this._max_index] = right;

        var color = 0xFFFFFFFF;
        
        // 计算笔触的坐标
        var x = (this._max_index - this._min_index) *  this._point_size;
        if (x > this._draw_width - this._point_size) x = this._draw_width - this._point_size;
        var y = 0;
        if (this._max_value != 0)
        {
            var rate = loss / this._max_value;
            if (rate > 1)
                color = 0xFF0000FF;
            elseif (rate < 0.00001)
            	color = 0xFF00FFFF;

            if (right)
                color = 0xFF00FF00;
            y = ALittle.Math_Floor(rate * this._draw_height);
            if (y > this._draw_height - this._point_size) y = this._draw_height - this._point_size;
        }
        y = this._draw_height - this._point_size - y;

        var surface = this._image.GetSurface(true);
        for (var col = x; col < x + this._point_size; 1)
        {
            for (var row = y; row < y + this._point_size; 1)
			{
                carp.SetCarpSurfacePixel(surface, col, row, color);
            }
        }

        if (!not_refresh) this.TryFreshMaxValue();
    }

    public fun ClearContent()
    {
        this._sum_value = 0;
        this._min_index = 0;
        this._max_index = 0;
        this._loss_map = new Map<int, double>();
        this._right_map = new Map<int, bool>();
        this._max_value = this.GetAverageValue();
        this._image.SetSurfaceSize(this._draw_width, this._draw_height, 0xFF000000);
    }

    public get surface() : carp.CarpSurface { return this._image.GetSurface(false); }

}
