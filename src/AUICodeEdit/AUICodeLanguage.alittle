
namespace AUIPlugin;

public struct ABnfColor
{
    double red;
    double green;
    double blue;
}

public class AUICodeLanguage
{
    private int _version = 1;
    private lua.ABnfFile _abnf_file;
    private AUICodeProject _project;
    private string _full_path;

    private Map<string, string> _auto_pair;

    public ctor(AUICodeProject project, string full_path)
    {
        this._project = project;
        this._full_path = full_path;

        this._auto_pair = new Map<string, string>();
        this._auto_pair["{"] = "}";
        this._auto_pair["["] = "]";
        this._auto_pair["("] = ")";
        this._auto_pair["<"] = ">";
        this._auto_pair["\""] = "\"";
        this._auto_pair["'"] = "'";
    }

    // 获取文本修改版本号
    public get version() : int { return this._version; }

    // 处理
    public fun OnOpen(string content) {}
    public fun OnClose() {}
    public fun OnShow() {}
    public fun OnHide() {}
    public fun OnSave() {}

    // Tab右键点击
    public fun OnTabRightMenu(AUIRightMenu menu)
    {
        
    }

    // 设置文本
    public fun SetText(string content)
    {
        this._version += 1;
        lua.alanguage.abnffile_settext(this._abnf_file, this._version, content);
    }

    // 插入文本
    public fun InsertText(string content, int it_line, int it_char)
    {
        this._version += 1;
        lua.alanguage.abnffile_inserttext(this._abnf_file, this._version, content, it_line, it_char);
    }

    // 删除文本
    public fun DeleteText(int it_line_start, int it_char_start, int it_line_end, int it_char_end)
    {
        this._version += 1;
        lua.alanguage.abnffile_deletetext(this._abnf_file, this._version, it_line_start, it_char_start, it_line_end, it_char_end);
    }

    // 查询颜色
    public await fun QueryColor(int line) : List<lua.ABnfQueryColor>
    {
        var query_id = this._project.Add(co);
        lua.alanguage.abnffile_querycolor(this._abnf_file, query_id, this._version, line);
        return yield;
    }

    // 查询快捷信息
    public await fun QueryInfo(int line, int char) : lua.ABnfQueryInfo
    {
        var query_id = this._project.Add(co);
        lua.alanguage.abnffile_queryinfo(this._abnf_file, query_id, this._version, line, char);
        return yield;
    }

    // 查询跳转信息
    public await fun QueryGoto(int line, int char) : lua.ABnfQueryGoto
    {
        var query_id = this._project.Add(co);
        lua.alanguage.abnffile_querygoto(this._abnf_file, query_id, this._version, line, char);
        return yield;
    }

    // 查询提示信息
    public await fun QueryComplete(int line, int char) : lua.ABnfQueryComplete
    {
        var query_id = this._project.Add(co);
        lua.alanguage.abnffile_querycomplete(this._abnf_file, query_id, this._version, line, char);
        return yield;
    }

    // 查询参数输入
    public await fun QueryParamList(int line, int char) : lua.ABnfQueryParamList
    {
        var query_id = this._project.Add(co);
        lua.alanguage.abnffile_queryparamlist(this._abnf_file, query_id, this._version, line, char);
        return yield;
    }

    // 查询参数位置
    public fun QueryParamIndex(int line, int char) : int, int
    {
        return lua.alanguage.abnffile_queryparamindex(this._abnf_file, this._version, line, char);
    }

    // 查询错误信息
    public await fun QueryError(bool force) : List<lua.ABnfQueryError>
    {
        var query_id = this._project.Add(co);
        lua.alanguage.abnffile_queryerror(this._abnf_file, query_id, this._version, force);
        return yield;
    }

    // 查询插入缩进
    public fun QueryDesiredIndent(int line, int char) : int
    {
        return lua.alanguage.abnffile_querydesiredindent(this._abnf_file, this._version, line, char);
    }

    // 查询格式化缩进
    public fun QueryFormateIndent(int line, int char) : int
    {
        return lua.alanguage.abnffile_queryformateindent(this._abnf_file, this._version, line, char);
    }

    // 查询自动匹配
    public fun QueryAutoPair(int line, int char, string input) : string
    {
        var right = this._auto_pair[input];
        if (right == null) return null;
        if (!lua.alanguage.abnffile_queryautopair(this._abnf_file, this._version, line, char, input, right))
            return null;
        return right;
    }

    // 查询自动格式化行
    public fun QueryAutoFormat(string input) : bool
    {
        return false;
    }

    // 查询是否支持自动格式化
    public fun NeedAutoFormat() : bool
    {
        return false;
    }

    // 颜色查询
    public fun QueryColorValue(int tag) : ABnfColor { return null; }

    // 查询提示图标路径
    public fun QueryCompleteIcon(int tag) : string { return null; }
}