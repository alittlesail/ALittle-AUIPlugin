
namespace AUIPlugin;

protected var g_ABnfProjectMap:Map<string, AUICodeProject> = ALittle.CreateValueWeakMap();

// 用于记录大写后缀和abnf描述文件的映射关系
protected var g_UpperExtMapABnf = new Map<string, string>();
g_UpperExtMapABnf["JSON"] = "AJson.abnf";
g_UpperExtMapABnf["CFG"] = "AJson.abnf";
g_UpperExtMapABnf["XML"] = "AXml.abnf";
g_UpperExtMapABnf["LUA"] = "ALua.abnf";

public struct AUICodeProjectGotoEvent : ALittle.Event
{
    string file_path;
    int line_start;
    int char_start;
    int line_end;
    int char_end;
}

public class AUICodeProject : ALittle.EventDispatcher
{
    private int _query_id = 0;
    private lua.ABnfProject _project;

    private ALittle.LoopFrame _loop;
    private Map<int, ALittle.Thread> _map;

    public ctor(lua.ABnfProject project)
    {
        this._project = project;
        this._map = new Map<int, ALittle.Thread>();
    }

    public static CreateALittleScriptProject() : AUICodeProject
    {
        if (lua.alittlescript == null) return null;
        var abnf_buffer = ALittle.File_ReadTextFromFile(g_ModuleBasePath.."Other/ABnf/ALittleScript.abnf");
        var project = new AUICodeALittleScriptProject(lua.alittlescript.create_alittlescript_project(abnf_buffer));
        project.Start();
        return project;
    }

    // 构建一个ABnf项目
    public static CreateABnfProject() : AUICodeProject
    {
        if (lua.abnf == null) return null;
        var abnf_project = g_ABnfProjectMap["abnf"];
        if (abnf_project == null)
        {
            var abnf_buffer = ALittle.File_ReadTextFromFile(g_ModuleBasePath.."/Other/ABnf/ABnf.abnf");
            abnf_project = new AUICodeABnfProject(lua.abnf.create_abnf_project(abnf_buffer));
            g_ABnfProjectMap["abnf"] = abnf_project;
            abnf_project.Start();
        }
        return abnf_project;
    }

    public static SupportUpperExt(string upper_ext) : bool
    {
        return g_UpperExtMapABnf[upper_ext] != null;
    }

    // 构建通用着色项目
    public static CreateCommonProject(string upper_ext) : AUICodeProject
    {
        if (lua.alanguage == null) return null;

        var abnf = g_UpperExtMapABnf[upper_ext];
        if (abnf == null) return null;

        var abnf_project = g_ABnfProjectMap[abnf];
        if (abnf_project == null)
        {
            var abnf_buffer = ALittle.File_ReadTextFromFile(g_ModuleBasePath.."/Other/ABnf/"..abnf);
            abnf_project = new AUICodeCommonProject(lua.alanguage.create_abnfproject(abnf_buffer), upper_ext);
            g_ABnfProjectMap[abnf] = abnf_project;
            abnf_project.Start();
        }
        return abnf_project;
    }

    public static Shutdown()
    {
        for (var name, project in g_ABnfProjectMap)
            project.Stop();
        g_ABnfProjectMap = ALittle.CreateValueWeakMap();
    }

    public get upper_ext() : string { return null; }

    public get project() : lua.ABnfProject { return this._project; }
    public fun QueryRuleColor() : Map<int, ABnfColor> { return lua.alanguage.abnfproject_queryrulecolor(this._project); }
    public fun UpdateFile(string module_path, string full_path) { lua.alanguage.abnfproject_updatefile(this._project, module_path, full_path, 0); }
    public fun TempFile(string module_path, string full_path, string text) { lua.alanguage.abnfproject_tempfile(this._project, module_path, full_path, text, 0); }
    public fun RemoveFile(string full_path) { lua.alanguage.abnfproject_removefile(this._project, full_path); }
    // 查找文件
    public await fun FindFile(string text) : List<string>
    {
        var query_id = this.Add(co);
        lua.alanguage.abnfproject_findfile(this._project, query_id, text);
        return yield;
    }

    // 查找定义
    public await fun FindDefine(string pre_input, string input) : List<lua.ABnfQueryCompleteInfo>
    {
        var query_id = this.Add(co);
        lua.alanguage.abnfproject_finddefine(this._project, query_id, pre_input, input);
        return yield;
    }

    // 查找跳转
    public await fun FindGoto(string text) : lua.ABnfQueryGoto
    {
        var query_id = this.Add(co);
        lua.alanguage.abnfproject_findgoto(this._project, query_id, text);
        return yield;
    }

    // 查询提示图标路径
    public fun QueryCompleteIcon(int tag) : string
    {
        return null;
    }

    public fun Start()
    {
        if (this._loop != null) return;

        this._loop = new ALittle.LoopFrame(bind(this.Update, this));
        A_WeakLoopSystem.AddUpdater(this._loop);
    }

    public fun Add(ALittle.Thread thread) : int
    {
        ++ this._query_id;
        this._map[this._query_id] = thread;
        return this._query_id;
    }

    public fun OnTreeMenu(string full_path, AUIRightMenu menu)
    {
        
    }

    public fun OnTreeItemMenu(string full_path, AUIRightMenu menu)
    {
        
    }

    private fun Update(int frame)
    {
        while (true)
        {
            var info = lua.alanguage.abnfproject_pollone(this._project);
            if (info == null) break;

            var thread = this._map[info.query_id];
            if (thread != null)
            {
                this._map[info.query_id] = null;
                ALittle.Coroutine.Resume(thread, info.result);      
            }
        }
    }

    public fun Stop()
    {
        lua.alanguage.abnfproject_clear(this._project);

        if (this._loop == null) return;

        A_WeakLoopSystem.RemoveUpdater(this._loop);
        this._loop = null;
    }
}